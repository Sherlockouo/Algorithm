#include <iostream>
#include <cstring>
using namespace std;

#define LL long long
#define MOD 1000000009
#define MAXN 100010

LL Exp(LL a,LL n, LL Mod){
	LL ans=1;
	if(a == 0 || a == 1) {
		return a;
	}
	while(n){
		if(n&1) ans=ans*a%Mod;
		a=a*a%Mod;
		n>>=1;
	}
	return ans;
}

LL Inv(LL a, LL Mod) {
	return Exp(a, Mod-2, Mod);
}

LL InvPre[MAXN];
LL zK[MAXN];

int main() {
	int i, j;
	int t;
	LL N, C;
	int K;
	
	LL sqrt5 = 383008016;
	LL invSqrt5 = Inv(sqrt5, MOD);
	LL inv2 = Inv(2, MOD);
	LL x = (sqrt5 + 1)* inv2 % MOD;
	LL y = ( (-sqrt5 + 1) * inv2 % MOD + MOD ) % MOD;
	LL z = invSqrt5;

	for(int i = 0; i < MAXN; ++i) {
		// 1. 预处理 i 的逆元 
		InvPre[i] = Inv(i, MOD);
		// 2. 预处理 5 的二次剩余的逆元的 i 次
		zK[i] = Exp(invSqrt5, i, MOD);
	}
	
	scanf("%d", &t);
	while(t--) {
		scanf("%I64d %I64d %d", &N, &C, &K);
		LL ans = 0;
		LL Ckj = 1;
		
		// 5. 费马小定理 （欧拉定理） 优化 
		C %= (MOD - 1);
		LL NT = (N + 1) % (MOD - 1);
		LL NN = (N + 1) % MOD;
		
		LL xC = Inv( Exp(x, C, MOD), MOD );
		LL yC = Exp(y, C, MOD);
		
		LL xcNow = Exp(x, C * K % (MOD - 1), MOD);
		LL ycNow = 1, sum = 0;
		
		for(int j = 0; j <= K; ++j) {
			// 非性能点，这里是利用了组合数的递推公式： 
			//  C[k][j] = C[k][j-1] * (K-j+1) / j; 
			if(j) {
				Ckj = Ckj * (K - j + 1) % MOD * InvPre[j] % MOD;
			}
			
			// 非性能点 
			LL qj = xcNow * ycNow % MOD;
			xcNow = xcNow * xC % MOD;
			ycNow = ycNow * yC % MOD;
			
			if(qj == 1) {
				// 公比为 1 的等比数列 
				sum = Ckj * NN % MOD;
			}else {
				// 大性能消耗点 (注意：这里一定要用费马小定理，否则超时，而且一定要用 G++ 提交)
				LL invqj = Inv(qj - 1, MOD);
				// 略有性能消耗 
				LL qjN_1 = Exp(qj, NT, MOD) - 1;
				// 无性能消耗 
				sum = qjN_1 * invqj % MOD * Ckj % MOD;
			} 

			// 6. 优化 (-1)^j 
			if(j & 1) {
				ans -= sum;
			}else {
				ans += sum;
			}
			ans %= MOD;
		}
		ans = (zK[K] * ans) % MOD;
		ans = (ans + MOD) % MOD;
		printf("%d\n", (int)ans);
	
	}
	return 0;
}

/*
31
5 1 1
2 1 2
4 2 3
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000
1000000000000000000 1000000000000000000 100000


12
2
9801
505675180
*/ 
